//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String'];
  path: Scalars['String'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  pages: Pages;
  pagesConnection: PagesConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPagesArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPagesConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PagesFilter>;
};

export type DocumentFilter = {
  pages?: InputMaybe<PagesFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']>;
};

export type DocumentNode = PagesHomepage | PagesAbout | PagesOfficial | PagesContact | Folder;

export type PagesHomepageEvents = {
  __typename?: 'PagesHomepageEvents';
  date?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
};

export type PagesHomepage = Node & Document & {
  __typename?: 'PagesHomepage';
  layout?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['JSON']>;
  events?: Maybe<Array<Maybe<PagesHomepageEvents>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type PagesAbout = Node & Document & {
  __typename?: 'PagesAbout';
  layout?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  about_text?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type PagesOfficialNabavkaDocuments = {
  __typename?: 'PagesOfficialNabavkaDocuments';
  link?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type PagesOfficialNabavka = {
  __typename?: 'PagesOfficialNabavka';
  date?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  documents?: Maybe<Array<Maybe<PagesOfficialNabavkaDocuments>>>;
};

export type PagesOfficial = Node & Document & {
  __typename?: 'PagesOfficial';
  layout?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  nabavka?: Maybe<Array<Maybe<PagesOfficialNabavka>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type PagesContact = Node & Document & {
  __typename?: 'PagesContact';
  layout?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  adress?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  working?: Maybe<Scalars['String']>;
  weekends?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type Pages = PagesHomepage | PagesAbout | PagesOfficial | PagesContact;

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type PagesHomepageEventsFilter = {
  date?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type PagesHomepageFilter = {
  layout?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  text?: InputMaybe<RichTextFilter>;
  events?: InputMaybe<PagesHomepageEventsFilter>;
};

export type PagesAboutFilter = {
  layout?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  about_text?: InputMaybe<RichTextFilter>;
};

export type PagesOfficialNabavkaDocumentsFilter = {
  link?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
};

export type PagesOfficialNabavkaFilter = {
  date?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  documents?: InputMaybe<PagesOfficialNabavkaDocumentsFilter>;
};

export type PagesOfficialFilter = {
  layout?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  nabavka?: InputMaybe<PagesOfficialNabavkaFilter>;
};

export type PagesContactFilter = {
  layout?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  adress?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  working?: InputMaybe<StringFilter>;
  weekends?: InputMaybe<StringFilter>;
};

export type PagesFilter = {
  homepage?: InputMaybe<PagesHomepageFilter>;
  about?: InputMaybe<PagesAboutFilter>;
  official?: InputMaybe<PagesOfficialFilter>;
  contact?: InputMaybe<PagesContactFilter>;
};

export type PagesConnectionEdges = {
  __typename?: 'PagesConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Pages>;
};

export type PagesConnection = Connection & {
  __typename?: 'PagesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PagesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updatePages: Pages;
  createPages: Pages;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdatePagesArgs = {
  relativePath: Scalars['String'];
  params: PagesMutation;
};


export type MutationCreatePagesArgs = {
  relativePath: Scalars['String'];
  params: PagesMutation;
};

export type DocumentUpdateMutation = {
  pages?: InputMaybe<PagesMutation>;
  relativePath?: InputMaybe<Scalars['String']>;
};

export type DocumentMutation = {
  pages?: InputMaybe<PagesMutation>;
};

export type PagesHomepageEventsMutation = {
  date?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
};

export type PagesHomepageMutation = {
  layout?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['JSON']>;
  events?: InputMaybe<Array<InputMaybe<PagesHomepageEventsMutation>>>;
};

export type PagesAboutMutation = {
  layout?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  about_text?: InputMaybe<Scalars['JSON']>;
};

export type PagesOfficialNabavkaDocumentsMutation = {
  link?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

export type PagesOfficialNabavkaMutation = {
  date?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  documents?: InputMaybe<Array<InputMaybe<PagesOfficialNabavkaDocumentsMutation>>>;
};

export type PagesOfficialMutation = {
  layout?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  nabavka?: InputMaybe<Array<InputMaybe<PagesOfficialNabavkaMutation>>>;
};

export type PagesContactMutation = {
  layout?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  adress?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  working?: InputMaybe<Scalars['String']>;
  weekends?: InputMaybe<Scalars['String']>;
};

export type PagesMutation = {
  homepage?: InputMaybe<PagesHomepageMutation>;
  about?: InputMaybe<PagesAboutMutation>;
  official?: InputMaybe<PagesOfficialMutation>;
  contact?: InputMaybe<PagesContactMutation>;
};

type PagesParts_PagesHomepage_Fragment = { __typename?: 'PagesHomepage', layout?: string | null, title?: string | null, text?: any | null, events?: Array<{ __typename: 'PagesHomepageEvents', date?: string | null, title?: string | null, text?: string | null, image?: string | null } | null> | null };

type PagesParts_PagesAbout_Fragment = { __typename?: 'PagesAbout', layout?: string | null, title?: string | null, image?: string | null, about_text?: any | null };

type PagesParts_PagesOfficial_Fragment = { __typename?: 'PagesOfficial', layout?: string | null, title?: string | null, nabavka?: Array<{ __typename: 'PagesOfficialNabavka', date?: string | null, title?: string | null, documents?: Array<{ __typename: 'PagesOfficialNabavkaDocuments', link?: string | null, name?: string | null } | null> | null } | null> | null };

type PagesParts_PagesContact_Fragment = { __typename?: 'PagesContact', layout?: string | null, title?: string | null, image?: string | null, adress?: string | null, phone?: string | null, email?: string | null, working?: string | null, weekends?: string | null };

export type PagesPartsFragment = PagesParts_PagesHomepage_Fragment | PagesParts_PagesAbout_Fragment | PagesParts_PagesOfficial_Fragment | PagesParts_PagesContact_Fragment;

export type PagesQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PagesQuery = { __typename?: 'Query', pages: { __typename?: 'PagesHomepage', id: string, layout?: string | null, title?: string | null, text?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, events?: Array<{ __typename: 'PagesHomepageEvents', date?: string | null, title?: string | null, text?: string | null, image?: string | null } | null> | null } | { __typename?: 'PagesAbout', id: string, layout?: string | null, title?: string | null, image?: string | null, about_text?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | { __typename?: 'PagesOfficial', id: string, layout?: string | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, nabavka?: Array<{ __typename: 'PagesOfficialNabavka', date?: string | null, title?: string | null, documents?: Array<{ __typename: 'PagesOfficialNabavkaDocuments', link?: string | null, name?: string | null } | null> | null } | null> | null } | { __typename?: 'PagesContact', id: string, layout?: string | null, title?: string | null, image?: string | null, adress?: string | null, phone?: string | null, email?: string | null, working?: string | null, weekends?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PagesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PagesFilter>;
}>;


export type PagesConnectionQuery = { __typename?: 'Query', pagesConnection: { __typename?: 'PagesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PagesConnectionEdges', cursor: string, node?: { __typename?: 'PagesHomepage', id: string, layout?: string | null, title?: string | null, text?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, events?: Array<{ __typename: 'PagesHomepageEvents', date?: string | null, title?: string | null, text?: string | null, image?: string | null } | null> | null } | { __typename?: 'PagesAbout', id: string, layout?: string | null, title?: string | null, image?: string | null, about_text?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | { __typename?: 'PagesOfficial', id: string, layout?: string | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, nabavka?: Array<{ __typename: 'PagesOfficialNabavka', date?: string | null, title?: string | null, documents?: Array<{ __typename: 'PagesOfficialNabavkaDocuments', link?: string | null, name?: string | null } | null> | null } | null> | null } | { __typename?: 'PagesContact', id: string, layout?: string | null, title?: string | null, image?: string | null, adress?: string | null, phone?: string | null, email?: string | null, working?: string | null, weekends?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const PagesPartsFragmentDoc = gql`
    fragment PagesParts on Pages {
  ... on PagesHomepage {
    layout
    title
    text
    events {
      __typename
      date
      title
      text
      image
    }
  }
  ... on PagesAbout {
    layout
    title
    image
    about_text
  }
  ... on PagesOfficial {
    layout
    title
    nabavka {
      __typename
      date
      title
      documents {
        __typename
        link
        name
      }
    }
  }
  ... on PagesContact {
    layout
    title
    image
    adress
    phone
    email
    working
    weekends
  }
}
    `;
export const PagesDocument = gql`
    query pages($relativePath: String!) {
  pages(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PagesParts
  }
}
    ${PagesPartsFragmentDoc}`;
export const PagesConnectionDocument = gql`
    query pagesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PagesFilter) {
  pagesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PagesParts
      }
    }
  }
}
    ${PagesPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      pages(variables: PagesQueryVariables, options?: C): Promise<{data: PagesQuery, variables: PagesQueryVariables, query: string}> {
        return requester<{data: PagesQuery, variables: PagesQueryVariables, query: string}, PagesQueryVariables>(PagesDocument, variables, options);
      },
    pagesConnection(variables?: PagesConnectionQueryVariables, options?: C): Promise<{data: PagesConnectionQuery, variables: PagesConnectionQueryVariables, query: string}> {
        return requester<{data: PagesConnectionQuery, variables: PagesConnectionQueryVariables, query: string}, PagesConnectionQueryVariables>(PagesConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  